"""empty message

Revision ID: d2cce31a328a
Revises: 0c456c8091de
Create Date: 2023-02-22 20:54:04.835858

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd2cce31a328a'
down_revision = '0c456c8091de'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('composer_contemporaries', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_composer_contemporaries', ['composer_id', 'contemporary_id'])

    with op.batch_alter_table('composers', schema=None) as batch_op:
        batch_op.alter_column('year_born',
                              existing_type=sa.INTEGER(),
                              type_=sa.Date(),
                              existing_nullable=True,
                              postgresql_using='to_date(year_born::text, \'YYYY\')')
        batch_op.alter_column('year_deceased',
                              existing_type=sa.INTEGER(),
                              type_=sa.Date(),
                              existing_nullable=True,
                              postgresql_using='to_date(year_born::text, \'YYYY\')')

    with op.batch_alter_table('performer_contemporaries', schema=None) as batch_op:
        batch_op.create_unique_constraint('unique_performer_contemporaries', ['performer_id', 'contemporary_id'])

    with op.batch_alter_table('performers', schema=None) as batch_op:
        batch_op.alter_column('year_born',
                              existing_type=sa.INTEGER(),
                              type_=sa.Date(),
                              existing_nullable=True, 
                              postgresql_using='to_date(year_born::text, \'YYYY\')')
        batch_op.alter_column('year_deceased',
                              existing_type=sa.INTEGER(),
                              type_=sa.Date(),
                              existing_nullable=True, 
                              postgresql_using='to_date(year_born::text, \'YYYY\')')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('performers', schema=None) as batch_op:
        batch_op.alter_column('year_deceased',
                              existing_type=sa.Date(),
                              type_=sa.INTEGER(),
                              existing_nullable=True,
                              postgresql_using='extract(year from year_born)::integer')
        batch_op.alter_column('year_born',
                              existing_type=sa.Date(),
                              type_=sa.INTEGER(),
                              existing_nullable=True,
                              postgresql_using='extract(year from year_born)::integer')

    with op.batch_alter_table('performer_contemporaries', schema=None) as batch_op:
        batch_op.drop_constraint(
            'unique_performer_contemporaries', type_='unique')

    with op.batch_alter_table('composers', schema=None) as batch_op:
        batch_op.alter_column('year_deceased',
                              existing_type=sa.Date(),
                              type_=sa.INTEGER(),
                              existing_nullable=True,
                              postgresql_using='extract(year from year_born)::integer')
        batch_op.alter_column('year_born',
                              existing_type=sa.Date(),
                              type_=sa.INTEGER(),
                              existing_nullable=True,
                              postgresql_using='extract(year from year_born)::integer')

    with op.batch_alter_table('composer_contemporaries', schema=None) as batch_op:
        batch_op.drop_constraint(
            'unique_composer_contemporaries', type_='unique')

    # ### end Alembic commands ###
